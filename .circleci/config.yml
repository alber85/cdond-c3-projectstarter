version: 2.1 
orbs:
  slack: circleci/slack@4.10.1
commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: circleci
          template: basic_fail_1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install 
            npm run test
      - notify_on_failure
   
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - notify_on_failure

  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical --force
      - notify_on_failure

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar
      - install_gzip
      - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                  --template-file .circleci/files/backend.yml \
                  --tags project=udapeople \
                  --stack-name "udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-front-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

      # Here's where you will add some code to rollback on failure      


  notify_on_success:
    docker:
     - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: pass
          channel: circleci
          template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires:
              - build-frontend
              - build-backend
              - test-frontend
              - scan-frontend
              - scan-backend
      - notify_on_success: 
          requires:
              - build-frontend
              - build-backend
              - test-frontend
              - scan-frontend
              - scan-backend
              - deploy-infrastructure
